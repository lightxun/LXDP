1. 部署到 IIS 服务器
1) WIN + R, optionalfeatures, 安装 Internet Information Services, 勾选即可无需多选其他, 确定, 重启电脑
2) 百度搜索: asp.net core runtime windows hosting bundle, 打开即下载, 或从官网进行下载 asp.net core runtime hosting bundle 版本, 注意选择与 SDK 匹配版本
3) 安装结束后, 在 IIS 中, 模块选中可查看到 AspNetCoreModuleV2 
4) 按照 ASP.NET 规范, 发布的网站应该放在 C:/inetpub/wwwroot 中
5) 右键项目名称 → 发布 → Folder
6) 在 IIS 中进行发布

2. 容器化部署 Docker
1) 为项目增加 docker 支持: 右键项目名称 → 添加 → Docker 支持 → Linux, 此时 VS 会为项目增加一个 Dockerfile 文件 
2) 修改 Dockerfile, 由于dockerfile 已经在当前目录下, 所以需要替换一下不必要的路径
2-1) 修改 line 10 : COPY 命令中, 去掉第一个中的目录留下 xxx.csproj , 修改第二个为 ./ → ["xxx.csproj", "./"]
2-2) 修改 line 11 : RUN 命令中, 修改根目录为 ./xxx.csproj → "./xxx.csproj"
2-3) 修改 line 13 : WORKDIR 命令中, 修改目录为 . → "/src/."
3) 在 docker 中创建镜像最常见的方法就是使用 dockerfile, 它是 docker 镜像中的描述文件,  VS 使用了 Multi-Stage 多阶段构建的方法, 可以有效的降低和优化 Docker 镜像的大小
4) 解析 Dockerfile 各阶段
4-1) 第一个阶段
4-1-1) 创建一个基于 aspnet:3.1 的镜像, 然后给这个阶段添加上 base 的标签, 项目将会运行在这个镜像的基础上, 此外, 这个镜像会保存在 dockerhub 上面, 可以随便下载
4-1-2) 切换到工作目录下面 
4-1-3) 设置对外端口为 80
4-1-4) 设置对外端口为 443
4-2) 第二个阶段
4-2-1) 将会拉取 3.1 sdk, 并使用 sdk 进行项目构建, 为此阶段起名为 build
4-3) 第三个阶段
4-3-1) 项目构建以后, 需要打包发布, 所以需要使用 sdk 来发布项目, 生成可执行的 dll 文件 
4-4) 第四个阶段
4-4-1) 将会切换回第一阶段的 base 镜像, 随后使用 COPY 命令, 将构建发布完成的所有文件都赋值到工作目录下
4-4-2) 最后给 docker 设置一个启动点, 通过 dotnet 命令, 启动项目
5) 开始部署
5-1) 使用 cmd 命令行, cd 到项目下,  docker build -t fakexiechengapi-img .
5-2) 使用 docker image 查看镜像是否存在
5-3) 容器化镜像, docker run -d --name fakexiechengapi -p 40000:80 fakexiechengapi-img
5-4) 查看容器 docker ps
5-5) 查看容器日志 docker logs fakexiechengapi
5-6) 查看网络情况 docker inspect bridge
5-7) 停止容器 docker stop ID
5-8) 删除容器 docker rm ID
5-9) 构建容器 docker build
5-10) 启动容器 docker run -d --name fakexiechengapi -p 40000:80 fakexiechengapi-img

3. 容器化部署 阿里云 ECS
1) 容器镜像服务 (ACR): 
1-1) 私人的 docker 镜像仓库
1-2) 构建完成的 docker 镜像将会被推送到这里
2) 阿里云 ECS 服务器: 
2-1) linux 操作系统, 安装和运行 docker 服务, 数据库和实战项目都会运行在 docker 上
2-2) 部署过程中, ESC 服务器会去容器镜像服务中拉取镜像
3) 部署步骤计划
	|					ECS 服务器				|			镜像仓库		|			本地构建		|
		1. 启动 ESC: linux, ecs.g6e.large								
		2. 安装配置 Docker: Docker 加速器						
														3. 启动服务							
		4. 容器化部署 SQL SERVER 配置安全组规则
																				5. 远程初始化数据库
																				6. 构建镜像
													7. 搭建私有镜像仓库
																				8. 推送镜像
		9. 拉取并部署镜像														
																				10. Postman 测试