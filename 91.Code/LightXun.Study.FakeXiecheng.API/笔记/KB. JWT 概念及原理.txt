1. 官方网站: https://jwt.io

2. 在 JWT 编码中包含了三个部分, 红色, 紫色, 蓝色, 三个部分使用 句号 进行分隔, 分别对应 HEADER, PAYLOAD, VERIFY SIGNATURE
1) HEADER, 具体描述 JWT 所使用的编码算法, 该算法将用于最后一个部分( VERIFY SIGNATURE ) 数字签名的认证
2) PAYLOAD, 保存了具体的用户信息, 包含用户ID, 用户姓名等, 该部分为用户自定义, 但其中 iat(时间戳) = issue at 发布于的意思 代表了 JWT 创建的时间, 同样可以增加 exp(毫秒) 代表 TOKEN 创建后, 过多少秒过期, 过期后, 整个 TOKEN 将被作废
3) VERIFY SIGNATURE, 等同于 JWT 激光防伪标志, 服务器通过这个数字签名来判断所发来的 TOKEN 是否有效, 是否被篡改过, 一旦数字签名失败, 整个 JWT 被作废, 数字签名使用的是非对称加密算法(RSA), 有且只能由服务器的私钥进行解密, 只要私钥不丢失, 基本上是可以视为绝对安全

3. 常用的单点登录(SSO)系统, 用来管理来自不同系统的 Session, 使其保持一直, 并在成功验证后, 重定向至不同系统中
1) 企业级的付费框架 ForgeRock、微软的 Micriosoft AM
2) 开源框架 OpenAM、OpenIDM、OpenDJ

4. JWT 优点
1) 无状态登录, 简化了用户验证的流程, 同时完美支持分布式部署
2) 使用非对称加密, 只要私钥不泄露, 基本上保证 Token 是绝对安全的

5. JWT 缺点
1) JWT 无状态登录, Token 一经发布就无法取消, 无法被服务器禁用, 也就是说, 如果用户因为自身原因, 导致 Token 被黑客窃取, 那么黑客就可以使用这个 Token 来伪装登录, 而服务端对此没有任何办法, 只能静静等待 Token 过期失效
2) JWT 前两个部分( HEADER, PAYLOAD ), 没有被加密, 仅仅是使用 BASE64 来编码而已, 也就是说, Token 中用户的信息是明文在传递, 很容易造成用户的信息泄露 

6. JWT 缺点的解决方案
1) 针对第一个缺点, 无解
2) 针对第二个缺点, 可以使用 https 给网站加入 SSL, JWT 数据会通过 HTTPS 协议加密以后再进行传输