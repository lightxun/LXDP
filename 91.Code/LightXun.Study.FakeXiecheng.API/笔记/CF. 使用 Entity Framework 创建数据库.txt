1. 创建数据库之前, 需要先验证数据模型, 查看数据模型是否符合数据库创建要求
1) 添加数据库限制, 例如主键信息、外键联系、外键关系等等
2) 在 Model 中引入 System.ComponentModel.DataAnnotations; System.ComponentModel.DataAnnotations.Schema; 后, 便可对 Model 做数据库限定
3) 数据库主键: 在属性上方加入标签 [Key]
4) 必填字段, 不可为空: 在属性上方加入标签 [Required]
5) 字段长度限制: 在属性上方加入标签 [MaxLength(100)]
6) 数值的精度限制: 在属性上方加入标签 [Column(TypeName = "decimal(18, 2)")]
7) 数值范围限制: 在属性上方加入标签 [Range(0.0, 1.0)]
8) 数值自增: 在属性上方加入标签 [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
9) 外键关联: 在属性上方加入标签 [ForeignKey("TouristRouteId")]		// 此处的 TouristRouteId, 是与 EF 自动生成的主键名(类名+主键)进行关联

2. 安装数据库创建工具: Entity Framework Core Tools
1) 在 NuGet 中搜索  entityframeworkcore.tools , 选择 Microsoft.EntityFrameworkCore.Tools 进行安装

3. 使用 Entity Framework Core Tools 创建数据库有三种方式
1) Database First, 数据库优先: 提前创建好数据库, 与数据库相连接
2) Model First, Model优先: 提前创建好数据模型 Model, 根据 Model 自动生成数据库
3) Code First, 代码优先: 不创建实体模型, 而通过 DatabaseContext 上下文关系对象来创建数据库

4. 本课程中, 使用 Model First 方式, 通过 VS 或者命令行来对数据进行创建、更新、数据迁移

5. 在创建数据库之前, 需要先 Build 下项目, 只有预先完成项目的构建, EF Core 才能从 DatabaseContext 中找到各种模型的类型, 完成最后的数据库创建

6. 使用 VS 来创建数据库
1) 依次点击 VS 工具栏的 [视图] - [其他窗口] - [程序包管理控制台]
2) 输入 add-migration [名称(initialMigration)], 生成数据库迁移代码
3) 执行后, 项目中会自动创建 Migrations 的文件夹, 其中存放了数据迁移的代码, 其中 Up 函数是用来执行数据库变化操作的(创建数据库, 根据模型进行映射), Down 函数中删除数据库中的表
4) 输入 update-database , 使用生成数据库迁移代码来创建更新数据库

7. 使用 Dotnet 命令行来创建数据库
0) 如果命令行中提示找不到指定的命令, 需要全局安装ef工具: dotnet tool install --global dotnet-ef
1) 在项目文件中启动命令行
2) 输入 dotnet ef migratioins add [名称(initialMigration)], 生成数据库迁移代码
3) 执行后, 项目中会自动创建 Migrations 的文件夹, 其中存放了数据迁移的代码, 其中 Up 函数是用来执行数据库变化操作的(创建数据库, 根据模型进行映射), Down 函数中删除数据库中的表
4) 输入 dotnet ef database update , 使用生成数据库迁移代码来创建更新数据库