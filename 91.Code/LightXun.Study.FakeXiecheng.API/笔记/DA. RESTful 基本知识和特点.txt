1. RESTful 的基础知识
1) 语义明确、轻量级、结构简单
2) REpresentational State Traansfer 表征性状态转移, RESTful 是 REST 的形容词, 是指 REST 风格化

2. RESTful 的基本特点
1) 无状态: 一次调用即返回结果, 不存在依赖于上次调用的情况, 例如 websocket 这类有状态的连接, 不输入 RESTful 范畴
2) 面向"资源": 无论是数据或是服务, 在 RESTful 中, 皆为资源, 所以在 url 中, 只会出现名词, 不会出现动词
2-1) 正确的url: api/v1/touristRoutes
2-2) 错误的url: api/v1/GetTouristRoutes、api/v1/createTouristRoutes
3) 使用 HTTP 的动词来表示 API 的操作
3-1) GET - 查看 - HTTP GET - api/v1/touristRoutes
3-2) POST - 创建 - HTTP POST - api/v1/touristRoutes
3-3) PUT - 更新 - HTTP PUT - api/v1/touristRoutes/{id}
3-4) PATCH - 部分更新 - HTTP PATCH api/v1/touristRoutes/{id}
3-5) DELETE - 删除 - HTTP DELETE api/v1/touristRoutes/{id}
4) HATOAS 超媒体即应用状态引擎 - Hypertext As The En-gine Of Application State

3. RESTful 的 6 个约束与最佳实践
1) Client-Server(前后端分离): 前端不关系后端的具体实现、业务处理、数据库访问等, 后端同样不关心前端技术、架构、语言等, 两端独立开发互不干扰
2) 无状态(独立请求): 每一次的请求都带有足够的信息, 让服务器去识别, 此类信息一般放在 url 和 header 中, 服务端根据每次请求独立的信息来提供服务, 自身不需要保存客户端的状态, 无状态的特征可以大大提高服务端的健壮性以及可拓展性, 比如 JWT(无状态登录)
3) 分层系统(代码分层): 指后端系统应该使用分层的思想进行系统架构, 比如传统的三层架构(数据访问层、业务逻辑层、表示层)
4) 统一接口(数据统一、API自我发现): 数据统一指前端与后端通过 header 中设置进行统一规定请求和返回格式等(例, Accept: application/json或 application/xml) 等, API自我发现指的是自我发现接续后面的请求, 例如分页, 可以发现下次请求地址, 装载至响应 header 的 X-Page 返回至前端, 前端直接调用即可
5) 可缓存: 服务器给客户端提供一个可以缓存页面相应内容的方法, 通过在响应头部中输出缓存相关的信息, 可以防止客户端频繁的与服务端交互, 同时可以避免客户端出现脏读的错误操作
6) 按需代码(非必要实现): 在某些情况下, 服务器可以临时给前端发送一些代码, 让前端去按需执行, 去实现某些服务器的特定功能

4. 总结常用的 HTTP 请求方法
1) GET、POST、PUT、PATCH、DELETE、HEADER、OPTIONS

5. Richardson Maturity Model(理查逊成熟度模型)四个级别的成熟度模型
0) 内容原文翻译地址: https://blog.csdn.net/dm_vincent/article/details/51341037
0) RESTful 之父罗伊大神: 只有使用了超媒体的, 才能算是真正的REST
1) LEVEL 1
1-1) 只要有个 API
1-2) 通过 http 传输数据
1-3) 比如, 简单对象访问协议 SOAP
2) LEVEL 2
2-1) 面向资源: url 为名称
2-2) HTTP 动词: GET POST PUT DELETE PATCH
3) LEVEL 3 超媒体控制(Hypermedia Controls)
3-1) HATEOAS(Hypertext As The Engine Of Application State):超媒体即应用状态引擎的实现
3-2) API 的自我发现机制: 即包含了许多相关 API 链接的 URL, 这些 URL 能够执行该资源允许范围内, 所有的相关操作, 例如, 查看一个订单, 该订单中不仅包含了订单的内容, 同时包含了取消或更新订单的 URL 链接
3-3) 超媒体(Hypermedia) = 多媒体(multimedia) + 超文本(hypertext)
3-4) 前端程序员再也不用将 API 请求的 URL 写入配置文件、拼接等操作, 只要返回响应中含有相关 URL 即可

6. RESTful API 范例
1) 全球最大同性交友网站, GitHub API URL: https://developer.github.com/v3/
2) 豆瓣 API URL: https://developers.douban.com/wiki/?title=api_v2