1. 安装 EntityFramework
1) 右键项目, 选择 管理 NuGet 程序包
2) 在浏览界面搜索 entityframeworkcore, 选择 Microsoft.EntityFrameworkCore 进行安装(本课中使用 3.1.3)
3) 建立 DataBase 文件夹来存放配置 EntityFramework 连接数据代码
4) 创建数据库映射工具 AppDbContext(上下文关系对象), 介于代码与数据库之间的连接器, 在代码和数据库之间的引导数据的流动
5) 在 AppDbContext 中引入 Microsoft.EntityFrameworkCore, 同时继承于 DbContext
6) 在 AppDbContext 的构造方法中, 注入 DbContextOptions<AppDbContext> options 的实例, 同时调用父类 :base(options), 将对象加载进去
7) 在项目的上下文关系对象中, 需要指明哪些模型需要映射到数据库, 使用 DbSet 来进行模型的映射, 每一个数据模型都需要使用一个 DbSet, 来映射给一张数据库的表
8) 在 Startup 文件中, 将 AppDbContext 对象注入到 IOC 容器中, 通过 ConfigureServices 中, 使用 services.AddDbContext<AppDbContext>(LAMDA); 来实现, 通过 LAMDA 表达式调用 SqlServer 的配置来加载数据库
9) 对于 EntityFramework 来说, 有一个扩展框架 EntityFramework SQLServer 来配置数据库信息
10) 在 NuGet 中搜索 entityframeworkcore.sqlserver, 选择 Microsoft.EntityFrameworkCore.SqlServer 进行安装(本课中使用 3.1.3), 该框架会在 EntityFramework 与 SqlServer 之间, 起到一个桥接的作用
11) 在 Startup 文件中, 引入 Microsoft.EntityFrameworkCore, 在 (8) 的 LAMDA 表达式中使用 option.UseSqlServer() 来完成 SqlServer 的配置
12) 若在项目中需要连入 MySql, 则在 NuGet 中安装 EntityFrameworkCore.MySql 扩展包, 同理可证其他类型数据库, 例如 EntityFrameworkCore.Oracle 等等
13) 通过 appsettings.json 来添加数据库配置信息, 为了访问 appsettings.json, 需要在 使用类中加入构建方法, 并且在构造方法中注入服务依赖
14) 在 Startup 文件中, 引入 Microsoft.Extensions.Configuration, 创建变量 public IConfiguration Configuration { get; }, 在构造方法中通过参数进行赋值, Configuration["DbContext:ConnectionString"]
15) 在 Services 文件夹中创建数据仓库, 其中需要使用 AppDbContext 来访问数据库, 创建一个私有且只读的 AppDbContext 对象, 在构造方法中, 通过参数实现依赖注入, 实现对应接口方法
16) 在 Startup 文件中, 注入服务方法 services.AddTransient