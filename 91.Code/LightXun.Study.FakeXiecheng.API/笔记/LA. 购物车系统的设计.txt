1. 购物车与其他系统的关系
1) 购物车与会员系统, 只有登录的用户才能使用购物车
2) 购物车与商品系统, 用户浏览商品以后, 可以将商品添加至购物车, 或从购物车中删除
3) 购物车与价格系统, 商品加入购物车以后, 如果商家修改了商品的价格, 购物车的价格也应该相应的调整, 但是如果已经下单, 并且购买成功的商品, 订单中的商品是绝对不能够发生变化的, 因为订单反映的是历史价格记录
4) 购物车与订单系统, 当用户决定购买, 可以再购物车中选择下单, 而购物车中的商品则会被转移到订单中

2. 基本功能
1) 用户可以浏览购物车信息, 显示金额和商品信息
2) 用户可以操作购物车, 添加和删除产品
3) 用户可以下单

3. RESTful 风格的购物车 api 接口设计
1) 浏览商品信息 - GET - api/shoppingCart
2) 添加 - POST - api/shoppingCart/items
3) 单项删除 - DELETE - api/shoppingCart/items/{Id} 
4) 批量删除 - DELETE - api/shoppingCart/items/({Id Array})
5) 下单 - POST - api/orders

4. 购物系统的流程: 首先在购物系统中有三个模块(产品模块, 购物车模块, 订单模块), 当我们选中一个产品后, 就可以将产品添加至购物车中, 当用户决定购买的时候, 可以再购物车中点击下单按钮, 这时订单系统中就会创建一个新的订单, 而购物车中的商品就会转移到新的订单中. 如果商品已经卖出去了, 而商家又修改了商品的价格, 那么此时订单中的历史价格, 也有可能发生变化

5. LineItem(CartLineItem)
1) 在微软官网给出了详细的定义: https://docs.microsoft.com/zh-cn/partner-center/develop/cart-resources
2) 表示购物车中包含的某一项产品的数据
3) 加入了 LineItem 后, 购物系统的流程: 原本购物系统中只有产品模块, 购物车模块, 订单模块三个模块之间互相联动, 此时加入一个价格模块, 在选择产品添加购物车时, 产品不要直接添加至购物车, 而是先进入价格模块处理一下, 在价格模块中创建一个 LineItem 对象, 然后把产品信息复制到 LineItem 里面, 需要复制的信息包括商品名称, 价格, 简介等等, 于是当用户点击添加购物车时, 添加的就不再是产品, 而是 LineItem, 当用户点击下单, 购物车向订单转移的也是 LineItem 而不是商品, 于是价格模块中的 LineItem 就成产品, 购物车, 订单联动的枢纽, 解耦了这三个模块 , 因此可以完美的解决因为价格变动而出现的问题了

6. 创建购物车数据模型和 LineItem 数据模型

7. 更新数据库
1) dotnet ef migrations add ShoppingCartMigration
2) dotnet ef database update