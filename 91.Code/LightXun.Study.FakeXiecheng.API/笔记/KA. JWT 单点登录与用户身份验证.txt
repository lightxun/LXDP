1. JWT 是干什么用的
1) JSON Web Token
2) JWT 的作用是用户授权(Authorization), 而不是用户的身份认证(Authentication)

2. 授权(Authorization) vs 认证(Authentication)
1) 用户认证指的是使用用户名和密码来验证当前用户的身份 - 用户登录 - 错误状态码: 401 Unauthorized(未授权)
2) 用户授权指当前用户由足够的权限访问特定的资源 - 错误状态码: 403 Forbidden(禁止访问)

3. 传统的 Session 登录 - 有状态登录
1) 用户登录后, 服务器会保存登录的 session 信息
2) Session ID 会通过 cookie 传递给前端
3) 当用户需要访问某一个 API 时, Session ID 会被包含在 Http 请求的 cookie 中一起发给后端, 后端通过 Session ID 来判断用户是否登录, 然后通过用户的权限来判断是否可以给用户提供响应的资源, 因为在服务器中需要保存用户的 Session, 所以称之为有状态登录

4. JWT 彻底改变了用户授权与认证的过程 - 无状态登录
1) 使用 JWT 来替换浏览器的 cookie, 因为 JWT 只负责处理授权, 所以 JWT 信息只需要保存在客户端, 而不需要保存在服务器中, 从而可以实现无状态登录

5. 有状态登录流程
1) 传统上, 会使用 Session 和 cookie 来保存用户的授权信息
2) 用户使用用户名和密码来登录系统, 服务器会来验证用户名和密码是否正确, 如果正确, 服务器会给用户创建一个包含用户登录信息, 角色, 权限的 Session 并保存, 同时将 Session ID 以 cookie 的形式发送给前端, 表示用户验证成功, 登录完成
3) 当用户访问某些资源时, 前端会向后端发送一个请求, 请求中携带包含 Session ID 的 cookie , 服务器取得 cookie 后, 会去查找是否有 session ID, 而后通过 session ID 来提取相应的 Session 来确定用户的身份与权限, 如果 Session 与 ID 相符, 同时 Session 的用户信息也能提供相应的权限, 服务器会认为该用户已登录, 最后资源信息会通过 Http 响应返回给前端

6. 无状态登录流程
1) 用户使用用户名和密码来登录系统, 如果登录成功, 服务器就会返回一个加密文档(JWT), 其中包含了除了用户密码以外的全部信息, 包括用户名, Email, 角色, 权限等, 前端在拿到 JWT 后, 将其保存在 cookie 或 localStoreage 中, 而生成的 JWT 不需要在后端保存
2) 当用户访问某些资源是, 前端会想后端发送一个请求, 请求的 Header 中包含 JWT 信息, 服务器取得 JWT 后, 会使用自己的私钥来给 JWT 文档解密, 如果解密成功, 而且数据依然有效, 则代表用户已经登录, 如果 JWT 所描述的用户权限允许用户访问资源, 那么服务器就会将资源通过响应返回给前端

7. Session vs JWT
1) Session 需要保存在服务器上, 而 Session ID 则保存在前端 cookie 中
2) JWT 信息只需要保存在客户端
3) 无状态登录优势: 分布式部署