1. 服务器花费太多时间在等待数据库, 最好的解决方案是异步操作

2. 同步操作
1) 程序调用某个方法, 需要等待执行完成以后才进行下一步操作
2) 是大部分程序逻辑的默认形式

3. 异步操作
1) 不要等待数据库, 继续执行下一个请求, 当数据库返回数据以后, 再回头继续处理上一个请求
2) 程序调用某个方法的时候, 不做任何等待, 在处理完成之前就返回该方法, 继续执行接下来的操作
3) 利用 async, await 来实现异步操作
4) 函数在执行完成前就可以先返回调用方, 然后继续执行的接下来的逻辑完成任务的函数
5) 语法: 
5-1) 方法声明必须使用 async 来修饰
5-2) 返回类型: void, Task, Task<T>, IAsyncEnumerable<T>(专用于处理数据流)
5-3) Task, Task<T> 都会先返回调用方, 然后开启一个新的进程继续其他工作, 同时当前进程挂起, 等待还没有完成的工作
5-4) 在 async 函数中, 要求必须至少包含一个 await 表达式, 表示需要异步执行的任务, 若不包含 await 表达式, 该函数等同于普通函数
5-5) 命名规范: 以 Async 结尾
5-6) async 作为一个上下联系的关键字, 使用这个关键字来修饰的方法, 必须只能由 async 定义的方法来调用
6) 异步控制流程
6-1) 异步方法, 该方法会异步执行工作, 然后立即返回到调用方法中
6-2) 调用异步, 在 async 声明的方法中, 调用异步方法, 然后在异步方法执行任务时, 挂起当前进程去执行其他操作, 
6-3) await 表达式, 用于异步方法的内部, 也就是需要异步执行的任务, 一个异步方法可以包含多个 await 表达式, 如果这个异步方法不存在 await 表达式时, VS 会发出警告

4. 关于异步的问答
1) 问题:
1-1) 在函数声明中使用 async 关键字的意义是什么
1-2) c# 设计师为什么要这么规定
1-3) 为什么 await 语句只能用在 async 方法里
1-4) 那么, async 方法可以不使用 await 语句吗
2) 答案:
2-1) 声明了 async 函数里就可以用 await 只是表象
2-2) async 会改变函数结构, 返回类型也会发生改变
2-3) 其实仅仅是个语法结构而已
2-4) 使用了 async 但是没有 await 是可以, 但仅仅是创建了一个Task类的构建函数而已
2-5) async 跟 await 没有因果关系, async 决定的是返回类型

5. 总结
1) 在函数声明中, async 关键字要放在返回类型之前
2) async 函数本身并不创建异步操作, 只有在调用 await 的时候才会进行异步操作
3) async 是上下文关键字, 想要异步调用一个 async 函数, 自己也必须得是 async 函数
4) 返回类型: void, Task, Task<T>, IAsyncEnumerable<T>


6. 百万级请求的处理
1) 异步服务 + 每个机器多开进程 + 花钱买机器
2) K8s, kubernetes 容器化分布式部署
3) .NET Core 对容器化非常友好, 支持度极高

7. 重构项目为异步
1) 修改数据仓库, 使其为异步访问数据库, 除 CRUD 以外函数, 全部替换为异步
2) 修改 Controller 中所有关于读写操作的 Action 为异步函数